mean(dat[dat[,8] == 3, 4])
mean(dat[dat[,8] == 4, 4])
mean(dat[dat[,8] == 5, 4])
mean(dat[dat[,8] == 6, 4])
#Should be a difference from overall mean
mean(dat[dat[,6] == 1, 4])
mean(dat[dat[,6] == 2, 4])
mean(dat[dat[,6] == 3, 4])
#Edge 5-10
#Should be a difference from overall mean
mean(dat[, 5])
mean(dat[dat[,10] == 1, 5])
mean(dat[dat[,10] == 2, 5])
mean(dat[dat[,10] == 3, 5])
mean(dat[dat[,10] == 4, 5])
data
mgm_obj <- mgm(data = data$data,
type = type,
level = level,
k = 2,
lambdaSel = "EBIC",
lambdaGam = 0.25)
mgm_obj$interactions$indicator
mgm_obj <- mgm(data = data$data,
type = type,
level = level,
k = 2,
lambdaSel = "EBIC",
lambdaGam = 0.25)
mgm_obj$interactions
mgm_obj
mgm_obj$interactions
mgm_obj$interactions$weightsAgg
mgm_obj$interactions$weightsAgg[[1]]
mgm_obj$interactions$weightsAgg[1]
mgm_obj$interactions
mgm_obj$interactions$indicator
mgm_obj$nodemodels
mgm_obj$nodemodels$model
mgm_obj$nodemodels[[1]]
mgm_obj$nodemodels[[1]]$model
mgm_obj$pairwise$wadj
library(qgraph)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
layout = "spring",
labels =  data$colnames)
# a) General Graph Info - 5 gaussian, 5 categorical
type = c("g","g","g","g","g","c","c","c","c","c")
level = c(1, 1, 1, 1, 1,      3,  5,  6,  2,  4)
# b) Define Interaction
factors <- list()
#Pairwise interactions
factors[[1]] <- matrix(c(1,6, #Edge C-D 3 levels
1,10,#Edge C-D 4 levels
2,3,#Edge C-C
2,6,#Edge C-D 3 levels
3,7,#Edge C-D 5 levels
4,6,#Edge C-D 3 levels
4,7,#Edge C-D 5 levels
4,9,#Edge C-D 2 levels
4,10,#Edge C-D 4 levels
5,10,#Edge C-D 4 levels
7,8), #Edge D 5 levels-D 6 levels
ncol=2, byrow = T)
#Defining weights of pair-wise interactions
#First element of interactions has to be weights of all pair-wise interactions
interactions <- list()
interactions[[1]] <- vector("list", length = length(factors[[1]])/2)
#For each edge we create a scalar/vector/matrix of weights
#For now set all to "Betas,Rhos,Phis" to 0.5
for (i in 1:length(interactions[[1]])){
edge <- factors[[1]][i,]
if (i <= 6) {
#We make edges 1-5 stronger interactions in order to
#Observe a difference in the conditional distributions after sampling
interactions[[1]][[i]] <- array(0.1, dim=c(level[edge[1]],level[edge[2]]))
} else {
interactions[[1]][[i]] <- array(0.2, dim=c(level[edge[1]],level[edge[2]]))
}
}
interactions[[1]][[6]] = interactions[[1]][[6]] + c(0.1,0.3,1)
interactions[[1]][[10]] = interactions[[1]][[10]] + c(0,0,0,0.5)
#Define Thresholds - for determining if interaction exists
thresholds <- list()
for (i in 1:length(type)){
thresholds[[i]] <- rep(0, level[i])
}
#Define Variances
sds <- rep(.1, length(type))
set.seed(1)
data <- mgmsampler(factors = factors,
interactions = interactions,
thresholds = thresholds,
sds = sds,
type = type,
level = level,
N = 500,
nIter = 100,
pbar = TRUE)
dat <- data$data
sample=as.data.frame(dat)
sample
# Check interactions for edge 1-6
mean(dat[, 4])
dat <- data$data
sample=as.data.frame(dat)
sample
mgm_obj <- mgm(data = data$data,
type = type,
level = level,
k = 2)
library(qgraph)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
layout = "spring",
labels =  data$colnames)
FactorGraph(object = mgm_obj,
PairwiseAsEdge = FALSE,
labels = data$colnames)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
layout = "spring",
labels =  data$colnames)
FactorGraph(object = mgm_obj,
PairwiseAsEdge = FALSE,
labels = data$colnames)
# a) General Graph Info - 5 gaussian, 5 categorical
type = c("g","g","g","g","g","c","c","c","c","c")
level = c(1, 1, 1, 1, 1,      3,  5,  6,  2,  4)
# b) Define Interaction
factors <- list()
#Pairwise interactions
factors[[1]] <- matrix(c(1,6, #Edge C-D 3 levels
1,10,#Edge C-D 4 levels
2,3,#Edge C-C
2,6,#Edge C-D 3 levels
3,7,#Edge C-D 5 levels
4,6,#Edge C-D 3 levels
4,7,#Edge C-D 5 levels
4,9,#Edge C-D 2 levels
4,10,#Edge C-D 4 levels
5,10,#Edge C-D 4 levels
7,8), #Edge D 5 levels-D 6 levels
ncol=2, byrow = T)
#Defining weights of pair-wise interactions
#First element of interactions has to be weights of all pair-wise interactions
interactions <- list()
interactions[[1]] <- vector("list", length = length(factors[[1]])/2)
#For each edge we create a scalar/vector/matrix of weights
#For now set all to "Betas,Rhos,Phis" to 0.5
for (i in 1:length(interactions[[1]])){
edge <- factors[[1]][i,]
if (i <= 6) {
#We make edges 1-5 stronger interactions in order to
#Observe a difference in the conditional distributions after sampling
interactions[[1]][[i]] <- array(0.7, dim=c(level[edge[1]],level[edge[2]]))
} else {
interactions[[1]][[i]] <- array(0.6, dim=c(level[edge[1]],level[edge[2]]))
}
}
interactions[[1]][[6]] = interactions[[1]][[6]] + c(0.1,0.3,1)
interactions[[1]][[10]] = interactions[[1]][[10]] + c(0,0,0,0.5)
#Define Thresholds - for determining if interaction exists
thresholds <- list()
for (i in 1:length(type)){
thresholds[[i]] <- rep(0, level[i])
}
#Define Variances
sds <- rep(.1, length(type))
set.seed(1)
data <- mgmsampler(factors = factors,
interactions = interactions,
thresholds = thresholds,
sds = sds,
type = type,
level = level,
N = 500,
nIter = 100,
pbar = TRUE)
mgm_obj <- mgm(data = data$data,
type = type,
level = level,
k = 2)
library(qgraph)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
layout = "spring",
labels =  data$colnames)
#Pairwise interactions
factors[[1]] <- matrix(c(1,6, #Edge C-D 3 levels
1,10,#Edge C-D 4 levels
2,3,#Edge C-C
2,6,#Edge C-D 3 levels
3,7,#Edge C-D 5 levels
4,6,#Edge C-D 3 levels
4,7,#Edge C-D 5 levels
4,9,#Edge C-D 2 levels
4,10,#Edge C-D 4 levels
5,10,#Edge C-D 4 levels
7,8), #Edge D 5 levels-D 6 levels
ncol=2, byrow = T)
#Defining weights of pair-wise interactions
#First element of interactions has to be weights of all pair-wise interactions
interactions <- list()
interactions[[1]] <- vector("list", length = length(factors[[1]])/2)
#For each edge we create a scalar/vector/matrix of weights
#For now set all to "Betas,Rhos,Phis" to 0.5
for (i in 1:length(interactions[[1]])){
edge <- factors[[1]][i,]
if (i <= 6) {
#We make edges 1-5 stronger interactions in order to
#Observe a difference in the conditional distributions after sampling
interactions[[1]][[i]] <- array(0.1, dim=c(level[edge[1]],level[edge[2]]))
} else {
interactions[[1]][[i]] <- array(0.2, dim=c(level[edge[1]],level[edge[2]]))
}
}
interactions[[1]][[6]] = interactions[[1]][[6]] + c(0.1,0.3,1)
interactions[[1]][[10]] = interactions[[1]][[10]] + c(0,0,0,0.5)
#Define Thresholds - for determining if interaction exists
thresholds <- list()
for (i in 1:length(type)){
thresholds[[i]] <- rep(0, level[i])
}
#Define Variances
sds <- rep(.1, length(type))
set.seed(1)
data <- mgmsampler(factors = factors,
interactions = interactions,
thresholds = thresholds,
sds = sds,
type = type,
level = level,
N = 500,
nIter = 100,
pbar = TRUE)
mgm_obj <- mgm(data = data$data,
type = type,
level = level,
k = 2)
library(qgraph)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
layout = "spring",
labels =  data$colnames)
interactions
mgm_obj <- mgm(data = data$data,
type = type,
level = level,
k = 2,
overparameterize = TRUE)
library(qgraph)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
layout = "spring",
labels =  data$colnames)
mgm_obj <- mgm(data = data$data,
type = type,
level = level,
k = 2,
lambdaSel = "CV",
ruleReg = "AND",
pbar = TRUE,
overparameterize = TRUE,
signInfo = FALSE)
library(qgraph)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
layout = "spring",
labels =  data$colnames)
mgm_obj$nodemodels[[1]]$model
############################################
iter <- 1
set.seed(iter)
N <- 2000
d_iter <- mgmsampler(factors = factors,
interactions = interactions,
thresholds = thresholds,
type = type,
level = level,
N = N,
nIter = 50,
pbar = TRUE)
############################################
# a) General Graph Info
type = c("c", "c", "c")
level = c(2, 2, 2)
# b) Define Interaction
factors <- list()
factors[[1]] <- NULL # no pairwise interactions
factors[[2]] <- matrix(c(1,2,3), ncol=3, byrow = T) # one 3-way interaction
interactions <- list()
interactions[[1]] <- NULL
interactions[[2]] <- vector("list", length = 1)
# threeway interaction no1
interactions[[2]][[1]] <- array(0, dim = c(level[1], level[2], level[3]))
theta <- .7
interactions[[2]][[1]][1, 1, 1] <- theta  #weight theta for conf (1,1,1), weight 0 for all others
# c) Define Thresholds
thresholds <- list()
thresholds[[1]] <- c(0, 0)
thresholds[[2]] <- c(0, 0)
thresholds[[3]] <- c(0, 0)
# 2) Sample from Graph
iter <- 1
set.seed(iter)
N <- 2000
d_iter <- mgmsampler(factors = factors,
interactions = interactions,
thresholds = thresholds,
type = type,
level = level,
N = N,
nIter = 50,
pbar = TRUE)
# 3.1) Estimate order 3 MGM using standard parameterization
d_est_stand <- mgm(data = d_iter$data,
type = type,
level = level,
k = 3,
lambdaSel = "CV",
ruleReg = "AND",
pbar = TRUE,
overparameterize = FALSE,
signInfo = FALSE)
# We look at the nodewise regression for node 1 (same for all)
coefs_stand <- d_est_stand$nodemodels[[1]]$model
# We look at the nodewise regression for node 1 (same for all)
coefs_stand <- d_est_stand$nodemodels[[1]]$model
coefs_stand
# 3.2) Estimate order 3 MGM using overparameterization
d_est_over <- mgm(data = d_iter$data,
type = type,
level = level,
k = 3,
lambdaSel = "CV",
ruleReg = "AND",
pbar = TRUE,
overparameterize = TRUE,
signInfo = FALSE)
# We look at the nodewise regression for node 1 (same for all)
coefs_over <- d_est_over$nodemodels[[1]]$model
coefs_over # recovers exactly the 3-way interaction
mgm_obj <- mgm(data = data$data,
type = type,
level = level,
k = 2,
lambdaSel = "CV",
ruleReg = "AND",
pbar = TRUE,
overparameterize = TRUE,
signInfo = FALSE)
mgm_obj <- mgm(data = data$data,
type = type,
level = level,
k = 2,
lambdaSel = "CV",
ruleReg = "AND",
pbar = TRUE,
overparameterize = TRUE,
signInfo = FALSE)
# a) General Graph Info - 5 gaussian, 5 categorical
type = c("g","g","g","g","g","c","c","c","c","c")
level = c(1, 1, 1, 1, 1,      3,  5,  6,  2,  4)
# b) Define Interaction
factors <- list()
#Pairwise interactions
factors[[1]] <- matrix(c(1,6, #Edge C-D 3 levels
1,10,#Edge C-D 4 levels
2,3,#Edge C-C
2,6,#Edge C-D 3 levels
3,7,#Edge C-D 5 levels
4,6,#Edge C-D 3 levels
4,7,#Edge C-D 5 levels
4,9,#Edge C-D 2 levels
4,10,#Edge C-D 4 levels
5,10,#Edge C-D 4 levels
7,8), #Edge D 5 levels-D 6 levels
ncol=2, byrow = T)
#Defining weights of pair-wise interactions
#First element of interactions has to be weights of all pair-wise interactions
interactions <- list()
interactions[[1]] <- vector("list", length = length(factors[[1]])/2)
#For each edge we create a scalar/vector/matrix of weights
#For now set all to "Betas,Rhos,Phis" to 0.5
for (i in 1:length(interactions[[1]])){
edge <- factors[[1]][i,]
if (i <= 6) {
#We make edges 1-5 stronger interactions in order to
#Observe a difference in the conditional distributions after sampling
interactions[[1]][[i]] <- array(0.1, dim=c(level[edge[1]],level[edge[2]]))
} else {
interactions[[1]][[i]] <- array(0.2, dim=c(level[edge[1]],level[edge[2]]))
}
}
interactions[[1]][[6]] = interactions[[1]][[6]] + c(0.1,0.3,1)
interactions[[1]][[10]] = interactions[[1]][[10]] + c(0,0,0,0.5)
#Define Thresholds - for determining if interaction exists
thresholds <- list()
for (i in 1:length(type)){
thresholds[[i]] <- rep(0, level[i])
}
#Define Variances
sds <- rep(.1, length(type))
mgm_obj <- mgm(data = data$data,
type = type,
level = level,
k = 2,
lambdaSel = "CV",
ruleReg = "AND",
pbar = TRUE,
overparameterize = TRUE,
signInfo = FALSE)
library(qgraph)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
layout = "spring",
labels =  data$colnames)
FactorGraph(object = mgm_obj,
PairwiseAsEdge = FALSE,
labels = data$colnames)
qgraph(mgm_obj$pairwise$wadj,
edge.color = mgm_obj$pairwise$edgecolor,
layout = "spring",
labels =  data$colnames)
FactorGraph(object = mgm_obj,
PairwiseAsEdge = FALSE,
labels = data$colnames)
FactorGraph(object = mgm_obj$pairwise$wadj,
PairwiseAsEdge = FALSE,
labels = data$colnames)
FactorGraph(object = mgm_obj$pairwise,
PairwiseAsEdge = FALSE,
labels = data$colnames)
FactorGraph(object = mgm_obj,
PairwiseAsEdge = FALSE,
labels = data$colnames)
mgm_obj$nodemodels[[1]]$model
mgm_obj$nodemodels[[4]]$model
mgm_obj$nodemodels[[8]]$model
mgm_obj$nodemodels[[9]]$model
mgm_obj$nodemodels[[5]]$model
mgm_obj$nodemodels[[2]]$model
#packages for working with graphs and sampling gaussian
install.packages("glasso")
install.packages("gRbase")
install.packages("mvtnorm")
library(pcalg)
library(glasso)
library(igraph)
library(dplyr)
library(gRbase)
library("mvtnorm")
#set directory so loading data works
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
sample_size <- 150
dimension <- 400
#Precision matrix for sparse model
#Diagonal = 1, Lower,upper diagonal =0.5, others = 0
create_sparse_matrix <- function(dimension){
mat <- diag(dimension)
for (i in 1:nrow(mat)){
if(i-1>=1){
mat[i,i-1]=0.5
}
if(i-1>=1){
mat[i-1,i]=0.5
}
}
#print(mat)
return (solve(mat))
}
#Precision matrix for dense model
#Diagonal=2, all others =1
create_dense_matrix <- function(dimension){
mat <- matrix(1, ncol=dimension, nrow=dimension)
mat <- mat + diag(dimension)
#print(mat)
return(solve(mat))
}
create_gaussian_sample <- function (sample_size,dimension, sparse=TRUE){
if(sparse){
mat <-create_sparse_matrix(dimension)
}else{
mat <- create_dense_matrix(dimension)
}
sample <- rmvnorm(sample_size, sigma = mat)
return(sample)
}
#Sparse scenario
sample_sparse <- create_gaussian_sample(sample_size, dimension)
sample_dense <- create_gaussian_sample(sample_size, dimension, sparse = FALSE)
sparse_estimate <-glasso(s = var(sample_sparse),
rho = 4,
nobs = sample_size,
maxit = 50)
sparse_estimate['wi']
sparse_estimate <-glasso(s = var(sample_sparse),
rho = 4,
nobs = sample_size,
maxit = 30)
sparse_estimate['wi']
colSums(matrix(unlist(sparse_estimate['wi']),nrow=dimension, byrow=TRUE)!=0)
#Dense scenario
dense_estimate <-glasso(s = var(sample_dense),
rho = 0.02,
nobs = sample_size,
maxit = 30)
dense_estimate['wi']
colSums(matrix(unlist(dense_estimate['wi']),nrow=dimension, byrow=TRUE)!=0)
